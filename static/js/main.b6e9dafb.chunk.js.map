{"version":3,"sources":["pages/HomePage/index.jsx","components/Nav/index.jsx","components/Card/index.jsx","pages/GamePage/index.jsx","pages/SettingPage/index.jsx","constants/index.js","App.js","utilities/index.js","serviceWorker.js","index.js"],"names":["HomePage","useState","name","score","leader","Nav","className","to","exact","alt","Card","symbol","onClick","number","flipped","matched","data-number","GamePage","deck","onReset","totalTurns","map","card","i","key","SetPage","symbols","allCards","concat","App","createNewDeck","createDeck","arr","j","inPlace","base","length","Math","floor","random","shuffle","setDeck","counter","setCounter","turns","setTurns","lastCard","setLastCard","useEffect","winningDeck","filter","alert","path","e","clickedCard","target","dataset","match","console","log","setTimeout","component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b6e9dafb.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\n\r\nconst HomePage = () => {\r\n  const [leader, setLeader] = useState({\r\n    name: \"Kate\",\r\n    score: 0,\r\n  });\r\n\r\n  return (\r\n    <>\r\n      <table>\r\n        <thead>\r\n          <tr>\r\n            <td>Name</td>\r\n            <td>Score</td>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          <tr>\r\n            <td>1</td>\r\n            <td>{leader.name}</td>\r\n          </tr>\r\n          <tr>\r\n            <td>2</td>\r\n          </tr>\r\n          <tr>\r\n            <td>3</td>\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default HomePage;\r\n","import React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport \"./nav.css\";\r\n\r\nconst Nav = () => {\r\n  return (\r\n    <div>\r\n      <ul className=\"list\">\r\n        <li className=\"list-elements\">\r\n          <NavLink\r\n            className=\"link-element\"\r\n            to={\"/milestone-3/\"}\r\n            exact\r\n            alt=\"Home\"\r\n          >\r\n            Home\r\n          </NavLink>\r\n        </li>\r\n        <li className=\"list-elements\">\r\n          <NavLink className=\"link-element\" to={\"/milestone-3/game\"} alt=\"Game\">\r\n            Game\r\n          </NavLink>\r\n        </li>\r\n        <li className=\"list-elements\">\r\n          <NavLink\r\n            className=\"link-element\"\r\n            to={\"/milestone-3/settings\"}\r\n            alt=\"Settings\"\r\n          >\r\n            Settings\r\n          </NavLink>\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\nexport default Nav;\r\n","import React from \"react\";\r\nimport \"./card.css\";\r\n\r\nconst Card = ({\r\n  className,\r\n  symbol,\r\n  onClick,\r\n  number,\r\n  flipped,\r\n  matched = false,\r\n}) => {\r\n  return (\r\n    <div className={className} onClick={onClick} data-number={number}>\r\n      {matched ? \"ok\" : flipped ? symbol : \"X\"}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\nimport { Card } from \"../../components\";\r\nimport \"./gamepage.css\";\r\n\r\nconst GamePage = ({ deck = [], onReset, onClick, totalTurns, matched }) => {\r\n  return (\r\n    <>\r\n      <div>\r\n        <span className=\"container\">\r\n          <p>Total turns: {totalTurns} </p>\r\n        </span>\r\n      </div>\r\n\r\n      <div matched={matched} className=\"deck\">\r\n        {deck.map((card, i) => (\r\n          <Card\r\n            key={i}\r\n            className={\"card\"}\r\n            number={i}\r\n            onClick={onClick}\r\n            {...card}\r\n          />\r\n        ))}\r\n      </div>\r\n      <div className=\"container\">\r\n        <button className=\"reset\" onClick={onReset}>\r\n          Reset\r\n        </button>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default GamePage;\r\n","import React from \"react\";\r\n\r\nconst SetPage = () => {\r\n  return (\r\n    <>\r\n      <div>I am the setting page</div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SetPage;\r\n","export const symbols = [\r\n  \"🐨\",\r\n  // \"🐻\",\r\n  // \"🐶\",\r\n  // \"🐗\",\r\n  // \"🐭\",\r\n  // \"🐔\",\r\n  // \"🐸\",\r\n  // \"🐱\",\r\n  // \"🦁\",\r\n  // \"🐯\",\r\n  // \"🦊\",\r\n  // \"🐺\",\r\n  // \"🐵\",\r\n  // \"🙈\",\r\n  // \"🙉\",\r\n  // \"🙊\",\r\n  // \"🐷\",\r\n  // \"🐹\",\r\n  // \"🐰\",\r\n];\r\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport { Route, Switch } from \"react-router-dom\";\nimport HomePage from \"./pages/HomePage\";\nimport GamePage from \"./pages/GamePage\";\nimport SetPage from \"./pages/SettingPage\";\nimport { symbols } from \"./constants\";\nimport { createDeck, shuffle } from \"./utilities\";\n\nconst allCards = symbols.concat(symbols);\n\nfunction App() {\n  let currentGameState = \"\";\n\n  const createNewDeck = () => createDeck(shuffle(allCards));\n  const [deck, setDeck] = useState(createNewDeck());\n  const [counter, setCounter] = useState(0);\n  const [turns, setTurns] = useState(0);\n\n  const onReset = () => {\n    setDeck(createNewDeck());\n    setTurns(0);\n  };\n\n  const [lastCard, setLastCard] = useState(null);\n\n  const onClick = (e) => {\n    currentGameState = \"play\";\n    const clickedCard = +e.target.dataset.number;\n\n    setDeck(\n      deck.map((card, i) =>\n        i !== clickedCard\n          ? card\n          : { ...card, flipped: !card.flipped, className: \"card flipped\" }\n      )\n    );\n    setLastCard(clickedCard);\n    setCounter(counter + 1);\n\n    if (counter === 1) {\n      if (deck[lastCard].symbol === deck[clickedCard].symbol) {\n        let match = deck.filter(\n          (card) => card.symbol === deck[clickedCard].symbol\n        );\n        match.map((card) => {\n          card.matched = true;\n        });\n        console.log(match);\n\n        setCounter(0);\n      } else {\n        setCounter(0);\n        setTimeout(\n          () =>\n            setDeck(\n              deck.map((card, i) =>\n                card.flipped\n                  ? { ...card, flipped: !card.flipped, className: \"card\" }\n                  : card\n              )\n            ),\n          500\n        );\n        setLastCard(null);\n      }\n      setTurns(turns + 1);\n    }\n    console.log(counter);\n    console.log(lastCard, clickedCard);\n    // console.log(match);\n  };\n\n  useEffect(() => {\n    let winningDeck = deck.filter((card) => !card.matched);\n    !winningDeck.length\n      ? (currentGameState = \"win\")\n      : (currentGameState = \"play\");\n\n    if (currentGameState === \"win\") alert(\"You Won!\");\n    return () => {\n      // cleanup;\n    };\n  }, [deck]);\n\n  return (\n    <>\n      <Switch>\n        <Route path=\"/milestone-3/\" exact>\n          <HomePage />\n        </Route>\n\n        <Route path=\"/milestone-3/game\" exact>\n          <GamePage\n            onClick={onClick}\n            totalTurns={turns}\n            deck={deck}\n            onReset={onReset}\n          />\n        </Route>\n\n        <Route path=\"/milestone-3/settings\" exact component={SetPage} />\n      </Switch>\n    </>\n  );\n}\n\nexport default App;\n","export const createDeck = (symbols) =>\r\n  symbols.map((symbol) => ({ symbol, flipped: false, matched: false }));\r\n\r\nexport const shuffle = (arr, inPlace = true) => {\r\n  // shallow copy if not inPlace, modifying the input array otherwise\r\n  const base = inPlace ? arr : [].concat(arr);\r\n  for (let i = arr.length, j; i; ) {\r\n    j = Math.floor(Math.random() * i);\r\n    [base[i], base[j]] = [base[j], base[--i]];\r\n  }\r\n  return base;\r\n};\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport { Nav } from \"./components\";\n\nReactDOM.render(\n  <Router>\n    <React.StrictMode>\n      <Nav></Nav>\n      <App />\n    </React.StrictMode>\n  </Router>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}