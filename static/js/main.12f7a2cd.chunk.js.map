{"version":3,"sources":["components/Scores/index.jsx","pages/HomePage/index.jsx","components/Nav/index.jsx","components/Card/index.jsx","pages/GamePage/index.jsx","pages/SettingPage/index.jsx","constants/index.js","App.js","utilities/index.js","serviceWorker.js","index.js"],"names":["Score","className","HomePage","Nav","to","exact","alt","Card","symbol","onClick","number","flipped","matched","data-number","GamePage","deck","onReset","totalTurns","map","card","i","key","SetPage","symbols","allCards","concat","App","createNewDeck","createDeck","arr","j","inPlace","base","length","Math","floor","random","shuffle","useState","setDeck","counter","setCounter","turns","setTurns","lastCard","setLastCard","useEffect","winningDeck","filter","alert","path","e","clickedCard","target","dataset","setTimeout","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.12f7a2cd.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Score = () => {\r\n  return (\r\n    <>\r\n      <div className=\"leaderDisplay\">\r\n        <ul></ul>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Score;\r\n","import React from \"react\";\r\nimport Score from \"../../components/Scores\";\r\n\r\nconst HomePage = () => {\r\n  return (\r\n    <>\r\n      <Score />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default HomePage;\r\n","import React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport \"./nav.css\";\r\n\r\nconst Nav = () => {\r\n  return (\r\n    <div>\r\n      <ul className=\"list\">\r\n        <li className=\"list-elements\">\r\n          <NavLink\r\n            className=\"link-element\"\r\n            to={\"/milestone-3/\"}\r\n            exact\r\n            alt=\"Home\"\r\n          >\r\n            Home\r\n          </NavLink>\r\n        </li>\r\n        <li className=\"list-elements\">\r\n          <NavLink className=\"link-element\" to={\"/milestone-3/game\"} alt=\"Game\">\r\n            Game\r\n          </NavLink>\r\n        </li>\r\n        <li className=\"list-elements\">\r\n          <NavLink\r\n            className=\"link-element\"\r\n            to={\"/milestone-3/settings\"}\r\n            alt=\"Settings\"\r\n          >\r\n            Settings\r\n          </NavLink>\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\nexport default Nav;\r\n","import React from \"react\";\r\nimport \"./card.css\";\r\n\r\nconst Card = ({\r\n  className,\r\n  symbol,\r\n  onClick,\r\n  number,\r\n  flipped,\r\n  matched = false,\r\n}) => {\r\n  return (\r\n    <div className={className} onClick={onClick} data-number={number}>\r\n      {matched ? \"✔️\" : flipped ? symbol : \"X\"}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\nimport { Card } from \"../../components\";\r\nimport \"./gamepage.css\";\r\n\r\nconst GamePage = ({ deck = [], onReset, onClick, totalTurns, matched }) => {\r\n  return (\r\n    <>\r\n      <div>\r\n        <span className=\"container\">\r\n          <p>Total turns: {totalTurns} </p>\r\n        </span>\r\n      </div>\r\n\r\n      <div matched={matched} className=\"deck\">\r\n        {deck.map((card, i) => (\r\n          <Card\r\n            key={i}\r\n            className={\"card\"}\r\n            number={i}\r\n            onClick={onClick}\r\n            {...card}\r\n          />\r\n        ))}\r\n      </div>\r\n      <div className=\"container\">\r\n        <button className=\"reset\" onClick={onReset}>\r\n          Reset\r\n        </button>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default GamePage;\r\n","import React from \"react\";\r\n\r\nconst SetPage = () => {\r\n  return (\r\n    <>\r\n      <div>I am the setting page</div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SetPage;\r\n","export const symbols = [\r\n  \"🐨\",\r\n  \"🐻\",\r\n  \"🐶\",\r\n  \"🐗\",\r\n  \"🐭\",\r\n  \"🐔\",\r\n  \"🐸\",\r\n  \"🐱\",\r\n  \"🦁\",\r\n  \"🐯\",\r\n  // \"🦊\",\r\n  // \"🐺\",\r\n  // \"🐵\",\r\n  // \"🙈\",\r\n  // \"🙉\",\r\n  // \"🙊\",\r\n  // \"🐷\",\r\n  // \"🐹\",\r\n  // \"🐰\",\r\n];\r\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport { Route, Switch } from \"react-router-dom\";\nimport HomePage from \"./pages/HomePage\";\nimport GamePage from \"./pages/GamePage\";\nimport SetPage from \"./pages/SettingPage\";\nimport { symbols } from \"./constants\";\nimport { createDeck, shuffle } from \"./utilities\";\n\nconst allCards = symbols.concat(symbols);\n\nfunction App() {\n  let currentGameState = \"\";\n\n  const createNewDeck = () => createDeck(shuffle(allCards));\n  const [deck, setDeck] = useState(createNewDeck());\n  const [counter, setCounter] = useState(0);\n  const [turns, setTurns] = useState(0);\n\n  const onReset = () => {\n    setDeck(createNewDeck());\n    setTurns(0);\n  };\n\n  const [lastCard, setLastCard] = useState(null);\n\n  const onClick = (e) => {\n    currentGameState = \"play\";\n    const clickedCard = +e.target.dataset.number;\n\n    if (deck[lastCard] !== deck[clickedCard]) {\n      setDeck(\n        deck.map((card, i) =>\n          i !== clickedCard\n            ? card\n            : { ...card, flipped: !card.flipped, className: \"card flipped\" }\n        )\n      );\n      setCounter(counter + 1);\n      setLastCard(clickedCard);\n    }\n\n    if (counter === 1 && deck[lastCard] !== deck[clickedCard]) {\n      if (\n        deck[lastCard].symbol === deck[clickedCard].symbol &&\n        deck[lastCard] !== deck[clickedCard]\n      ) {\n        setDeck(\n          deck.map((card) =>\n            card.symbol === deck[lastCard].symbol\n              ? {\n                  ...card,\n                  matched: true,\n                  flipped: !card.flipped,\n                  className: \"card flipped\",\n                }\n              : card\n          )\n        );\n        setLastCard(null);\n        setCounter(0);\n      } else {\n        setCounter(0);\n        setTimeout(\n          () =>\n            setDeck(\n              deck.map((card, i) =>\n                card.flipped\n                  ? { ...card, flipped: !card.flipped, className: \"card\" }\n                  : card\n              )\n            ),\n          500\n        );\n        setLastCard(null);\n      }\n      setTurns(turns + 1);\n    }\n  };\n\n  useEffect(() => {\n    let winningDeck = deck.filter((card) => !card.matched);\n    !winningDeck.length\n      ? (currentGameState = \"win\")\n      : (currentGameState = \"play\");\n\n    if (currentGameState === \"win\") {\n      alert(\"You Won!\");\n    }\n    return () => {\n      // cleanup;\n    };\n  }, [deck]);\n\n  return (\n    <>\n      <Switch>\n        <Route path=\"/milestone-3/\" exact>\n          <HomePage />\n        </Route>\n\n        <Route path=\"/milestone-3/game\" exact>\n          <GamePage\n            onClick={onClick}\n            totalTurns={turns}\n            deck={deck}\n            onReset={onReset}\n          />\n        </Route>\n\n        <Route path=\"/milestone-3/settings\" exact component={SetPage} />\n      </Switch>\n    </>\n  );\n}\n\nexport default App;\n","export const createDeck = (symbols) =>\r\n  symbols.map((symbol) => ({ symbol, flipped: false, matched: false }));\r\n\r\nexport const shuffle = (arr, inPlace = true) => {\r\n  // shallow copy if not inPlace, modifying the input array otherwise\r\n  const base = inPlace ? arr : [].concat(arr);\r\n  for (let i = arr.length, j; i; ) {\r\n    j = Math.floor(Math.random() * i);\r\n    [base[i], base[j]] = [base[j], base[--i]];\r\n  }\r\n  return base;\r\n};\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport { Nav } from \"./components\";\n\nReactDOM.render(\n  <Router>\n    <React.StrictMode>\n      <Nav></Nav>\n      <App />\n    </React.StrictMode>\n  </Router>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}